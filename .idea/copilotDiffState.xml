<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Main.java" />
              <option name="updatedContent" value="package src;&#10;&#10;import src.ui.MainWindow;&#10;import javax.swing.*;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        try {&#10;            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeel());&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        &#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            new MainWindow().setVisible(true);&#10;        });&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/Question.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/Question.java" />
              <option name="originalContent" value="package model;&#10;&#10;public class Question {&#10;}&#10;" />
              <option name="updatedContent" value="package model;&#13;&#10;&#13;&#10;public class Question {&#13;&#10;    private int id;&#13;&#10;    private String text;&#13;&#10;    private int maxPoints;&#13;&#10;    &#13;&#10;    public Question(int id, String text, int maxPoints) {&#13;&#10;        this.id = id;&#13;&#10;        this.text = text;&#13;&#10;        this.maxPoints = maxPoints;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public int getId() {&#13;&#10;        return id;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getText() {&#13;&#10;        return text;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public int getMaxPoints() {&#13;&#10;        return maxPoints;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setId(int id) {&#13;&#10;        this.id = id;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setText(String text) {&#13;&#10;        this.text = text;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setMaxPoints(int maxPoints) {&#13;&#10;        this.maxPoints = maxPoints;&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return String.format(&quot;Question{id=%d, text='%s', maxPoints=%d}&quot;, id, text, maxPoints);&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public boolean equals(Object obj) {&#13;&#10;        if (this == obj) return true;&#13;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#13;&#10;        Question question = (Question) obj;&#13;&#10;        return id == question.id;&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public int hashCode() {&#13;&#10;        return Integer.hashCode(id);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/Test.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/Test.java" />
              <option name="updatedContent" value="package src.model;&#10;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;public class Test {&#10;    private String name;&#10;    private List&lt;Question&gt; questions;&#10;    private int maxPoints;&#10;    &#10;    public Test() {&#10;        this.questions = new ArrayList&lt;&gt;();&#10;        this.maxPoints = 0;&#10;    }&#10;    &#10;    public Test(List&lt;Question&gt; questions) {&#10;        this.questions = new ArrayList&lt;&gt;(questions);&#10;        calculateMaxPoints();&#10;    }&#10;    &#10;    public Test(String name, List&lt;Question&gt; questions) {&#10;        this.name = name;&#10;        this.questions = new ArrayList&lt;&gt;(questions);&#10;        calculateMaxPoints();&#10;    }&#10;    &#10;    private void calculateMaxPoints() {&#10;        this.maxPoints = questions.stream()&#10;            .mapToInt(Question::getMaxPoints)&#10;            .sum();&#10;    }&#10;    &#10;    public void addQuestion(Question question) {&#10;        questions.add(question);&#10;        maxPoints += question.getMaxPoints();&#10;    }&#10;    &#10;    public void removeQuestion(Question question) {&#10;        if (questions.remove(question)) {&#10;            maxPoints -= question.getMaxPoints();&#10;        }&#10;    }&#10;    &#10;    public String getName() {&#10;        return name;&#10;    }&#10;    &#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;    &#10;    public List&lt;Question&gt; getQuestions() {&#10;        return new ArrayList&lt;&gt;(questions);&#10;    }&#10;    &#10;    public void setQuestions(List&lt;Question&gt; questions) {&#10;        this.questions = new ArrayList&lt;&gt;(questions);&#10;        calculateMaxPoints();&#10;    }&#10;    &#10;    public int getMaxPoints() {&#10;        return maxPoints;&#10;    }&#10;    &#10;    public int getQuestionCount() {&#10;        return questions.size();&#10;    }&#10;    &#10;    public Question getQuestion(int index) {&#10;        if (index &gt;= 0 &amp;&amp; index &lt; questions.size()) {&#10;            return questions.get(index);&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    public boolean isEmpty() {&#10;        return questions.isEmpty();&#10;    }&#10;    &#10;    @Override&#10;    public String toString() {&#10;        return String.format(&quot;Test{name='%s', questions=%d, maxPoints=%d}&quot;, &#10;            name, questions.size(), maxPoints);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/TestResult.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/TestResult.java" />
              <option name="updatedContent" value="package src.model;&#10;&#10;public class TestResult {&#10;    private int totalPoints;&#10;    private int maxPoints;&#10;    private int errors;&#10;    private double percentage;&#10;    &#10;    public TestResult(int totalPoints, int maxPoints, int errors) {&#10;        this.totalPoints = totalPoints;&#10;        this.maxPoints = maxPoints;&#10;        this.errors = errors;&#10;        calculatePercentage();&#10;    }&#10;    &#10;    private void calculatePercentage() {&#10;        if (maxPoints &gt; 0) {&#10;            this.percentage = (double) totalPoints / maxPoints * 100;&#10;        } else {&#10;            this.percentage = 0;&#10;        }&#10;    }&#10;    &#10;    public int getTotalPoints() { return totalPoints; }&#10;    public int getMaxPoints() { return maxPoints; }&#10;    public int getErrors() { return errors; }&#10;    public double getPercentage() { return percentage; }&#10;    &#10;    public void setTotalPoints(int totalPoints) {&#10;        this.totalPoints = totalPoints;&#10;        calculatePercentage();&#10;    }&#10;    &#10;    public void setErrors(int errors) {&#10;        this.errors = errors;&#10;        this.totalPoints = Math.max(0, this.totalPoints - errors);&#10;        calculatePercentage();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/service/FileReader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/FileReader.java" />
              <option name="updatedContent" value="package src.service;&#10;&#10;import src.model.Question;&#10;import java.io.BufferedReader;&#10;import java.io.IOException;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.regex.Matcher;&#10;import java.util.regex.Pattern;&#10;&#10;public class FileReader {&#10;    private static final Pattern QUESTION_PATTERN = &#10;        Pattern.compile(&quot;^(.+?)\\s+PMAX:\\s*(\\d+)\\s*$&quot;);&#10;    &#10;    public static List&lt;Question&gt; readQuestions(String filePath) throws IOException {&#10;        List&lt;Question&gt; questions = new ArrayList&lt;&gt;();&#10;        &#10;        try (BufferedReader reader = Files.newBufferedReader(Paths.get(filePath))) {&#10;            String line;&#10;            int questionNumber = 1;&#10;            &#10;            while ((line = reader.readLine()) != null) {&#10;                line = line.trim();&#10;                if (line.isEmpty()) {&#10;                    continue;&#10;                }&#10;                &#10;                Matcher matcher = QUESTION_PATTERN.matcher(line);&#10;                if (matcher.matches()) {&#10;                    String questionText = matcher.group(1).trim();&#10;                    int maxPoints = Integer.parseInt(matcher.group(2));&#10;                    &#10;                    questions.add(new Question(questionNumber++, questionText, maxPoints));&#10;                } else {&#10;                    throw new IllegalArgumentException(&#10;                        &quot;Nieprawidłowy format pytania: &quot; + line);&#10;                }&#10;            }&#10;        }&#10;        &#10;        if (questions.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Plik nie zawiera żadnych pytań&quot;);&#10;        }&#10;        &#10;        return questions;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/service/ScoreCalculator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/ScoreCalculator.java" />
              <option name="updatedContent" value="package src.service;&#10;&#10;import src.model.Question;&#10;import java.util.Map;&#10;&#10;public class ScoreCalculator {&#10;    &#10;    public int calculatePoints(Map&lt;Question, Boolean&gt; answers) {&#10;        int totalPoints = 0;&#10;        &#10;        for (Map.Entry&lt;Question, Boolean&gt; entry : answers.entrySet()) {&#10;            if (entry.getValue()) { // Jeśli odpowiedź jest zaznaczona jako poprawna&#10;                totalPoints += entry.getKey().getMaxPoints();&#10;            }&#10;        }&#10;        &#10;        return totalPoints;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/service/TestProcessor.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/service/TestProcessor.java" />
              <option name="updatedContent" value="package src.service;&#10;&#10;import src.model.Question;&#10;import src.model.Test;&#10;import src.model.TestResult;&#10;import java.util.Map;&#10;&#10;public class TestProcessor {&#10;    private ScoreCalculator scoreCalculator;&#10;    &#10;    public TestProcessor() {&#10;        this.scoreCalculator = new ScoreCalculator();&#10;    }&#10;    &#10;    public TestResult calculateResult(Test test, Map&lt;Question, Boolean&gt; answers, int errors) {&#10;        int totalPoints = scoreCalculator.calculatePoints(answers);&#10;        int maxPoints = test.getMaxPoints();&#10;        &#10;        // Odejmij błędy od wyniku&#10;        totalPoints = Math.max(0, totalPoints - errors);&#10;        &#10;        return new TestResult(totalPoints, maxPoints, errors);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ui/MainWindow.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ui/MainWindow.java" />
              <option name="updatedContent" value="package src.ui;&#10;&#10;import src.service.FileReader;&#10;import src.service.TestProcessor;&#10;import src.model.Question;&#10;import src.model.Test;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.util.List;&#10;&#10;public class MainWindow extends JFrame {&#10;    private TestPanel testPanel;&#10;    private ResultPanel resultPanel;&#10;    private JButton loadFileButton;&#10;    private Test currentTest;&#10;    private TestProcessor testProcessor;&#10;    &#10;    public MainWindow() {&#10;        this.testProcessor = new TestProcessor();&#10;        initializeComponents();&#10;        setupLayout();&#10;        setupEventListeners();&#10;    }&#10;    &#10;    private void initializeComponents() {&#10;        setTitle(&quot;Panel Sprawdzania Egzaminów&quot;);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(800, 600);&#10;        setLocationRelativeTo(null);&#10;        &#10;        loadFileButton = new JButton(&quot;Wczytaj plik z pytaniami&quot;);&#10;        testPanel = new TestPanel();&#10;        resultPanel = new ResultPanel();&#10;        &#10;        testPanel.setTestProcessor(testProcessor);&#10;        testPanel.setResultPanel(resultPanel);&#10;    }&#10;    &#10;    private void setupLayout() {&#10;        setLayout(new BorderLayout());&#10;        &#10;        JPanel topPanel = new JPanel(new FlowLayout());&#10;        topPanel.add(loadFileButton);&#10;        &#10;        add(topPanel, BorderLayout.NORTH);&#10;        add(testPanel, BorderLayout.CENTER);&#10;        add(resultPanel, BorderLayout.SOUTH);&#10;    }&#10;    &#10;    private void setupEventListeners() {&#10;        loadFileButton.addActionListener(this::loadFile);&#10;    }&#10;    &#10;    private void loadFile(ActionEvent e) {&#10;        JFileChooser fileChooser = new JFileChooser();&#10;        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(&#10;            &quot;Pliki tekstowe&quot;, &quot;txt&quot;));&#10;        &#10;        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {&#10;            try {&#10;                List&lt;Question&gt; questions = FileReader.readQuestions(&#10;                    fileChooser.getSelectedFile().getAbsolutePath());&#10;                currentTest = new Test(questions);&#10;                testPanel.loadTest(currentTest);&#10;                resultPanel.reset();&#10;            } catch (Exception ex) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Błąd podczas wczytywania pliku: &quot; + ex.getMessage(),&#10;                    &quot;Błąd&quot;, JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ui/ResultPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ui/ResultPanel.java" />
              <option name="updatedContent" value="package src.ui;&#10;&#10;import src.model.TestResult;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;&#10;public class ResultPanel extends JPanel {&#10;    private JLabel pointsLabel;&#10;    private JLabel percentageLabel;&#10;    private JLabel errorsLabel;&#10;    &#10;    public ResultPanel() {&#10;        initializeComponents();&#10;        setupLayout();&#10;        reset();&#10;    }&#10;    &#10;    private void initializeComponents() {&#10;        pointsLabel = new JLabel();&#10;        percentageLabel = new JLabel();&#10;        errorsLabel = new JLabel();&#10;        &#10;        Font boldFont = new Font(Font.SANS_SERIF, Font.BOLD, 14);&#10;        pointsLabel.setFont(boldFont);&#10;        percentageLabel.setFont(boldFont);&#10;        errorsLabel.setFont(boldFont);&#10;    }&#10;    &#10;    private void setupLayout() {&#10;        setLayout(new GridLayout(3, 1, 5, 5));&#10;        setBorder(BorderFactory.createTitledBorder(&quot;Wyniki&quot;));&#10;        &#10;        add(pointsLabel);&#10;        add(errorsLabel);&#10;        add(percentageLabel);&#10;    }&#10;    &#10;    public void displayResult(TestResult result) {&#10;        pointsLabel.setText(String.format(&quot;Punkty: %d / %d&quot;, &#10;            result.getTotalPoints(), result.getMaxPoints()));&#10;        &#10;        errorsLabel.setText(String.format(&quot;Błędy: %d&quot;, result.getErrors()));&#10;        &#10;        percentageLabel.setText(String.format(&quot;Wynik procentowy: %.1f%%&quot;, &#10;            result.getPercentage()));&#10;        &#10;        // Kolorowanie wyniku&#10;        if (result.getPercentage() &gt;= 75) {&#10;            percentageLabel.setForeground(Color.GREEN.darker());&#10;        } else if (result.getPercentage() &gt;= 50) {&#10;            percentageLabel.setForeground(Color.ORANGE.darker());&#10;        } else {&#10;            percentageLabel.setForeground(Color.RED);&#10;        }&#10;    }&#10;    &#10;    public void reset() {&#10;        pointsLabel.setText(&quot;Punkty: - / -&quot;);&#10;        errorsLabel.setText(&quot;Błędy: -&quot;);&#10;        percentageLabel.setText(&quot;Wynik procentowy: -%&quot;);&#10;        percentageLabel.setForeground(Color.BLACK);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ui/TestPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ui/TestPanel.java" />
              <option name="updatedContent" value="package src.ui;&#10;&#10;import src.model.Question;&#10;import src.model.Test;&#10;import src.service.TestProcessor;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class TestPanel extends JPanel {&#10;    private Test currentTest;&#10;    private Map&lt;Question, JCheckBox&gt; questionCheckBoxes;&#10;    private JSpinner errorsSpinner;&#10;    private JButton calculateButton;&#10;    private TestProcessor testProcessor;&#10;    private ResultPanel resultPanel;&#10;    &#10;    public TestPanel() {&#10;        questionCheckBoxes = new HashMap&lt;&gt;();&#10;        initializeComponents();&#10;        setupLayout();&#10;    }&#10;    &#10;    private void initializeComponents() {&#10;        errorsSpinner = new JSpinner(new SpinnerNumberModel(0, 0, 100, 1));&#10;        calculateButton = new JButton(&quot;Oblicz wynik&quot;);&#10;        &#10;        calculateButton.addActionListener(e -&gt; calculateResults());&#10;    }&#10;    &#10;    private void setupLayout() {&#10;        setLayout(new BorderLayout());&#10;        setBorder(BorderFactory.createTitledBorder(&quot;Pytania testowe&quot;));&#10;    }&#10;    &#10;    public void loadTest(Test test) {&#10;        this.currentTest = test;&#10;        questionCheckBoxes.clear();&#10;        removeAll();&#10;        &#10;        JPanel mainPanel = new JPanel(new BorderLayout());&#10;        &#10;        // Panel z pytaniami&#10;        JPanel questionsPanel = new JPanel();&#10;        questionsPanel.setLayout(new BoxLayout(questionsPanel, BoxLayout.Y_AXIS));&#10;        &#10;        for (Question question : test.getQuestions()) {&#10;            JCheckBox checkBox = new JCheckBox(&#10;                String.format(&quot;%s (Punkty: %d)&quot;, &#10;                question.getText(), question.getMaxPoints()));&#10;            checkBox.setSelected(true); // Domyślnie zaznaczone jako poprawne&#10;            questionCheckBoxes.put(question, checkBox);&#10;            questionsPanel.add(checkBox);&#10;            questionsPanel.add(Box.createVerticalStrut(5));&#10;        }&#10;        &#10;        JScrollPane scrollPane = new JScrollPane(questionsPanel);&#10;        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);&#10;        &#10;        // Panel z błędami i przyciskiem&#10;        JPanel bottomPanel = new JPanel(new FlowLayout());&#10;        bottomPanel.add(new JLabel(&quot;Liczba błędów:&quot;));&#10;        bottomPanel.add(errorsSpinner);&#10;        bottomPanel.add(calculateButton);&#10;        &#10;        mainPanel.add(scrollPane, BorderLayout.CENTER);&#10;        mainPanel.add(bottomPanel, BorderLayout.SOUTH);&#10;        &#10;        add(mainPanel, BorderLayout.CENTER);&#10;        &#10;        revalidate();&#10;        repaint();&#10;    }&#10;    &#10;    private void calculateResults() {&#10;        if (currentTest == null || testProcessor == null || resultPanel == null) {&#10;            return;&#10;        }&#10;        &#10;        Map&lt;Question, Boolean&gt; answers = new HashMap&lt;&gt;();&#10;        for (Map.Entry&lt;Question, JCheckBox&gt; entry : questionCheckBoxes.entrySet()) {&#10;            answers.put(entry.getKey(), entry.getValue().isSelected());&#10;        }&#10;        &#10;        int errors = (Integer) errorsSpinner.getValue();&#10;        var result = testProcessor.calculateResult(currentTest, answers, errors);&#10;        resultPanel.displayResult(result);&#10;    }&#10;    &#10;    public void setTestProcessor(TestProcessor testProcessor) {&#10;        this.testProcessor = testProcessor;&#10;    }&#10;    &#10;    public void setResultPanel(ResultPanel resultPanel) {&#10;        this.resultPanel = resultPanel;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/FileUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/FileUtils.java" />
              <option name="updatedContent" value="package src.utils;&#10;&#10;import java.io.File;&#10;&#10;public class FileUtils {&#10;    &#10;    public static boolean isValidTextFile(String filePath) {&#10;        if (filePath == null || filePath.trim().isEmpty()) {&#10;            return false;&#10;        }&#10;        &#10;        File file = new File(filePath);&#10;        return file.exists() &amp;&amp; file.isFile() &amp;&amp; filePath.toLowerCase().endsWith(&quot;.txt&quot;);&#10;    }&#10;    &#10;    public static String getFileExtension(String fileName) {&#10;        if (fileName == null || fileName.isEmpty()) {&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        int lastDotIndex = fileName.lastIndexOf('.');&#10;        if (lastDotIndex == -1) {&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        return fileName.substring(lastDotIndex + 1).toLowerCase();&#10;    }&#10;    &#10;    public static long getFileSize(String filePath) {&#10;        File file = new File(filePath);&#10;        return file.exists() ? file.length() : -1;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/ValidationUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/ValidationUtils.java" />
              <option name="updatedContent" value="package src.utils;&#10;&#10;public class ValidationUtils {&#10;    &#10;    public static boolean isValidPoints(int points) {&#10;        return points &gt;= 0;&#10;    }&#10;    &#10;    public static boolean isValidPercentage(double percentage) {&#10;        return percentage &gt;= 0 &amp;&amp; percentage &lt;= 100;&#10;    }&#10;    &#10;    public static boolean isNonEmptyString(String str) {&#10;        return str != null &amp;&amp; !str.trim().isEmpty();&#10;    }&#10;    &#10;    public static boolean isValidQuestionFormat(String line) {&#10;        return line != null &amp;&amp; line.matches(&quot;^.+\\s+PMAX:\\s*\\d+\\s*$&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>